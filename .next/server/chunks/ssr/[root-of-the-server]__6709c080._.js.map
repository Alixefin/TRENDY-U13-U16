{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/common/TournamentLogo.tsx"],"sourcesContent":["\nimport React from 'react';\nimport Image from 'next/image';\n\ninterface TournamentLogoProps {\n  appName?: string;\n  tournamentName?: string;\n  size?: 'small' | 'medium' | 'large';\n  logoUrl?: string | null; // Accept a logo URL\n}\n\n// A simple SVG logo placeholder\nconst DefaultLogoIcon: React.FC<{ size?: 'small' | 'medium' | 'large' }> = ({ size = 'medium' }) => {\n  const iconSize = size === 'large' ? 40 : 32;\n  return (\n    <svg width={iconSize} height={iconSize} viewBox=\"0 0 100 100\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-primary mr-2\">\n      <path d=\"M50 0L61.8 23.5L88.2 23.5L68.2 38.2L76.4 61.8L50 47.1L23.6 61.8L31.8 38.2L11.8 23.5L38.2 23.5L50 0Z\" />\n      <path d=\"M50 25C41.7157 25 35 31.7157 35 40C35 48.2843 41.7157 55 50 55C58.2843 55 65 48.2843 65 40C65 31.7157 58.2843 25 50 25ZM50 50C44.4772 50 40 45.5228 40 40C40 34.4772 44.4772 30 50 30C55.5228 30 60 34.4772 60 40C60 45.5228 55.5228 50 50 50Z\" />\n      <circle cx=\"50\" cy=\"75\" r=\"15\" />\n    </svg>\n  );\n};\n\n\nconst TournamentLogo: React.FC<TournamentLogoProps> = ({ appName = \"Trendy's U13/U16\", tournamentName, size = 'medium', logoUrl }) => {\n  let textSize = 'text-xl';\n  let imageSize = 32;\n  if (size === 'small') {\n    textSize = 'text-lg';\n    imageSize = 28;\n  }\n  if (size === 'large') {\n    textSize = 'text-2xl';\n    imageSize = 40;\n  }\n\n\n  return (\n    <div className=\"flex items-center\">\n      {logoUrl ? (\n        <Image\n          src={logoUrl}\n          alt={tournamentName || appName || 'Tournament Logo'}\n          width={imageSize}\n          height={imageSize}\n          className=\"mr-2 rounded-sm object-contain\"\n          data-ai-hint=\"logo tournament\"\n        />\n      ) : (\n        <DefaultLogoIcon size={size} />\n      )}\n      <div className=\"flex flex-col\">\n        <span className={`font-headline font-semibold ${textSize} leading-tight`}>\n          {appName || tournamentName} {/* Display tournamentName if appName is empty */}\n        </span>\n        {appName && tournamentName && ( // Only show tournamentName as subtitle if appName is also present\n          <span className={`font-headline text-xs ${size === 'small' ? 'hidden sm:inline' : ''} opacity-80 leading-tight`}>\n            {tournamentName}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TournamentLogo;\n"],"names":[],"mappings":";;;;AAEA;;;AASA,gCAAgC;AAChC,MAAM,kBAAqE,CAAC,EAAE,OAAO,QAAQ,EAAE;IAC7F,MAAM,WAAW,SAAS,UAAU,KAAK;IACzC,qBACE,8OAAC;QAAI,OAAO;QAAU,QAAQ;QAAU,SAAQ;QAAc,MAAK;QAAe,OAAM;QAA6B,WAAU;;0BAC7H,8OAAC;gBAAK,GAAE;;;;;;0BACR,8OAAC;gBAAK,GAAE;;;;;;0BACR,8OAAC;gBAAO,IAAG;gBAAK,IAAG;gBAAK,GAAE;;;;;;;;;;;;AAGhC;AAGA,MAAM,iBAAgD,CAAC,EAAE,UAAU,kBAAkB,EAAE,cAAc,EAAE,OAAO,QAAQ,EAAE,OAAO,EAAE;IAC/H,IAAI,WAAW;IACf,IAAI,YAAY;IAChB,IAAI,SAAS,SAAS;QACpB,WAAW;QACX,YAAY;IACd;IACA,IAAI,SAAS,SAAS;QACpB,WAAW;QACX,YAAY;IACd;IAGA,qBACE,8OAAC;QAAI,WAAU;;YACZ,wBACC,8OAAC,6HAAA,CAAA,UAAK;gBACJ,KAAK;gBACL,KAAK,kBAAkB,WAAW;gBAClC,OAAO;gBACP,QAAQ;gBACR,WAAU;gBACV,gBAAa;;;;;qCAGf,8OAAC;gBAAgB,MAAM;;;;;;0BAEzB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAK,WAAW,CAAC,4BAA4B,EAAE,SAAS,cAAc,CAAC;;4BACrE,WAAW;4BAAe;;;;;;;oBAE5B,WAAW,gCACV,8OAAC;wBAAK,WAAW,CAAC,sBAAsB,EAAE,SAAS,UAAU,qBAAqB,GAAG,yBAAyB,CAAC;kCAC5G;;;;;;;;;;;;;;;;;;AAMb;uCAEe","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/common/SplashScreen.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport TournamentLogo from './TournamentLogo';\n\ninterface SplashScreenProps {\n  onFinished: () => void;\n}\n\nconst SplashScreen: React.FC<SplashScreenProps> = ({ onFinished }) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n    }, 2000); // Show splash for 2 seconds\n\n    const finishTimer = setTimeout(() => {\n        onFinished();\n    }, 2500); // Call onFinished after fade out\n\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(finishTimer);\n    }\n  }, [onFinished]);\n\n  return (\n    <div\n      className={`fixed inset-0 z-50 flex flex-col items-center justify-center bg-background transition-opacity duration-500 ease-in-out ${\n        isVisible ? 'opacity-100' : 'opacity-0 pointer-events-none'\n      }`}\n      aria-hidden={!isVisible}\n      role=\"alertdialog\"\n      aria-labelledby=\"splash-title\"\n    >\n      <TournamentLogo appName=\"Trendy's U13/U16\" size=\"large\" />\n      <p id=\"splash-title\" className=\"mt-4 text-lg font-headline text-primary animate-pulse\">\n        Loading Tournament...\n      </p>\n    </div>\n  );\n};\n\nexport default SplashScreen;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AASA,MAAM,eAA4C,CAAC,EAAE,UAAU,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,QAAQ,WAAW;YACvB,aAAa;QACf,GAAG,OAAO,4BAA4B;QAEtC,MAAM,cAAc,WAAW;YAC3B;QACJ,GAAG,OAAO,iCAAiC;QAE3C,OAAO;YACL,aAAa;YACb,aAAa;QACf;IACF,GAAG;QAAC;KAAW;IAEf,qBACE,8OAAC;QACC,WAAW,CAAC,uHAAuH,EACjI,YAAY,gBAAgB,iCAC5B;QACF,eAAa,CAAC;QACd,MAAK;QACL,mBAAgB;;0BAEhB,8OAAC,8IAAA,CAAA,UAAc;gBAAC,SAAQ;gBAAmB,MAAK;;;;;;0BAChD,8OAAC;gBAAE,IAAG;gBAAe,WAAU;0BAAwD;;;;;;;;;;;;AAK7F;uCAEe","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport SplashScreen from '@/components/common/SplashScreen';\n\nexport default function HomePage() {\n  const router = useRouter();\n  const [showSplash, setShowSplash] = useState(true);\n\n  const handleSplashFinished = () => {\n    setShowSplash(false);\n    router.replace('/matches');\n  };\n  \n  // This effect guards against direct navigation to / if splash is already done.\n  // Useful if component state is lost but app logic means splash shouldn't re-appear.\n  useEffect(() => {\n    if (!showSplash) {\n      router.replace('/matches');\n    }\n  }, [showSplash, router]);\n\n  if (showSplash) {\n    return <SplashScreen onFinished={handleSplashFinished} />;\n  }\n\n  return null; // Or a loading indicator while redirecting\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,uBAAuB;QAC3B,cAAc;QACd,OAAO,OAAO,CAAC;IACjB;IAEA,+EAA+E;IAC/E,oFAAoF;IACpF,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,YAAY;YACf,OAAO,OAAO,CAAC;QACjB;IACF,GAAG;QAAC;QAAY;KAAO;IAEvB,IAAI,YAAY;QACd,qBAAO,8OAAC,4IAAA,CAAA,UAAY;YAAC,YAAY;;;;;;IACnC;IAEA,OAAO,MAAM,2CAA2C;AAC1D","debugId":null}}]
}